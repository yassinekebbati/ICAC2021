 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author: Yassine Kebbati
% Date: 10/07/2021
% Control NNMPC-Autonomous_Driving
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [Y,Xf,Af] = neural_function(X,~,~)
%NEURAL_FUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Sep-2021 16:17:24.
% 
% [Y] = neural_function(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-14;3;0.5;-30];
x1_step1.gain = [0.0714285714285714;0.0833333333333333;5;0.0333333333333333];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.2201460348140553691;-0.37230866306345589134;-1.7985622719187011054;-1.685274431107029125;-0.13859281698183723019;0.47137079504712375844;-1.1819205846212696986;-1.3559634961782884854];
IW1_1 = [1.0717343333672459949 0.2396947965562319649 0.89721872054698015297 3.6952942162738184884;0.40478872684359890055 1.0018110472426957624 -0.21421905890776077319 -0.26615419099985326845;1.6336978107574062768 -0.6665010989213623338 0.51330087176167282781 -2.3288626307348208044;0.79183661413841766041 2.3541072054898748434 1.6457063291504625546 -2.7721009947111125982;-1.8917948526627250683 2.321241776457568573 -0.16074507676864890904 0.23421787991035694643;-0.53988666846508304165 0.90685134037879322477 1.0649647017258947468 -2.3777821035825370544;-1.7052394744487247014 0.39786034786040153088 0.80937908190544105569 -0.21977739942418694774;-3.4015311352911639098 -0.89063684007309096291 0.30023347968307528832 -0.011755555029470232675];

% Layer 2
b2 = [1.4698140089159159594;0.26293026039040034991;-1.0112501135063531876;1.1055016982436971507;0.79292141173865715587;1.1532208134969559321];
LW2_1 = [-1.6142590912357326349 3.0235839693797061933 0.10154294892671469897 1.7967670568469411574 0.095596244069694080725 -0.37303858909350684492 -0.29274214076567367515 0.28807739537835008736;0.91623384066603474896 0.16684966749273830167 -1.1070235968658379555 -0.63660297696179646287 -1.3940277787138615206 -0.15036437854941095416 0.24483602983236713024 -1.6474092931437585019;-1.0229558767590929413 1.2772243804813414592 -1.5166819318606408196 0.5955534487936631205 0.064611087798672028892 -0.20035759392361596198 0.085514871114710427902 -0.34814887455977328035;-0.13177239693219039429 1.0014314041047696069 0.74036247539315303001 -0.87027578939417593595 -1.1987930823291506055 -0.9004683842853512532 1.6757159091602920054 -1.0978266269633909502;1.3591383184946590479 1.431037889461548307 1.6182011652822885228 0.17752172738891958126 -1.6839606786427165908 0.60504430721578339458 -1.8007982221232066156 -0.22090877713545756245;0.25299771640664492356 0.23053190658566638516 -0.019742535625739639216 -0.10309876303003326359 -0.58546981310098877849 -0.35282644174559352201 -0.71991287407749238181 1.4795024037888420132];

% Layer 3
b3 = [0.66691174336276881629;1.1337250449012377107;-0.31545936331286539289;2.2348086423180153481];
LW3_2 = [-1.811515661116228193 -1.1235364060428096877 -1.0072864749521459604 -0.55707648738704529379 -0.77713230509588315797 -0.97014108164010814939;-0.05381519915507740337 -0.44818629004451232545 0.53543845634408138157 -0.67062833660573306638 0.47641201578770853153 -2.2405397367049957325;0.38175567290484890837 -0.94089036461923569732 1.4439707927455414094 0.14153247873360474962 1.3196299852481787607 1.9057732255180033221;0.073097788330568597148 -0.44593107789082597758 0.49966587310659488219 1.3624597427469724575 1.6786097090829459333 0.44568999308188356201];

% Layer 4
b4 = [0.083688906363483445139;0.56148423946689141051;0.0083582951272318465469;0.51210087572644813481];
LW4_3 = [-0.027330346314979769851 -0.0035631852905552920292 0.0019188748259785209233 -0.043339420664131392269;-0.060642378531891097393 -0.074454706768499773206 0.10678314380632171476 -0.22298823992279837025;-0.0001739129505533621757 0.018743907922901786867 -0.0037997320904981923828 -0.0013212778533100931998;0.45666090574876011532 0.15919368915670822906 -0.25405970194270338647 -0.81509238722411458955];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.117647058823529;0.0384615384615385;0.202020202020202;20.2020202020202];
y1_step1.xoffset = [1;3;0.1;0.001];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = tansig_apply(repmat(b3,1,Q) + LW3_2*a2);
    
    % Layer 4
    a4 = poslin_apply(repmat(b4,1,Q) + LW4_3*a3);
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a4,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(4,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Linear Positive Transfer Function
function a = poslin_apply(n,~)
  a = max(0,n);
  a(isnan(n)) = nan;
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
